<?php

namespace App\Console\Commands;

use App\Jobs\SendEmailNotification;
use App\Models\EmailNotification;
use App\Models\Equipment;
use App\Models\NotificationSetting;
use Illuminate\Console\Command;

class TestNotificationEmails extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'notifications:test {--type=calibration_due : Tipo de notificaci√≥n a probar}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Probar env√≠o de correos usando las configuraciones de la base de datos';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $type = $this->option('type');

        // Obtener la configuraci√≥n del tipo especificado
        $setting = NotificationSetting::where('name', $type)->first();

        if (!$setting) {
            $this->error("‚ùå No se encontr√≥ configuraci√≥n para el tipo: {$type}");
            $this->line("Tipos disponibles: calibration_due, maintenance_reminder, maintenance_completed, maintenance_overdue");
            return 1;
        }

        if (!$setting->is_active) {
            $this->error("‚ùå La configuraci√≥n '{$type}' est√° desactivada");
            return 1;
        }

        // Obtener un equipo para la prueba
        $equipment = Equipment::first();

        if (!$equipment) {
            $this->error('‚ùå No se encontr√≥ ning√∫n equipo en la base de datos.');
            return 1;
        }

        $this->info("üß™ PROBANDO ENV√çO DE CORREOS");
        $this->line("=====================================");
        $this->line("üìã Tipo: {$setting->name}");
        $this->line("üìù Descripci√≥n: {$setting->description}");
        $this->line("‚úâÔ∏è  Destinatarios: " . implode(', ', $setting->email_addresses));
        $this->line("üè≠ Equipo de prueba: {$equipment->instrument} ({$equipment->int_code})");

        if (!$this->confirm('¬øContinuar con el env√≠o?')) {
            $this->line('Operaci√≥n cancelada.');
            return 0;
        }

        // Crear notificaci√≥n usando la configuraci√≥n real
        $notification = EmailNotification::create([
            'equipment_id' => $equipment->id,
            'notification_type' => $type,
            'recipients' => $setting->email_addresses,
            'subject' => "üß™ PRUEBA - {$setting->description} - {$equipment->instrument}",
            'message' => "Esta es una prueba del sistema de notificaciones.\n\nTipo: {$setting->name}\nEquipo: {$equipment->instrument} (C√≥digo: {$equipment->int_code})\n\nSi recibiste este correo, la configuraci√≥n est√° funcionando correctamente.",
            'scheduled_at' => now(),
            'sent_at' => null,
            'status' => 'pending'
        ]);

        // Enviar el email
        SendEmailNotification::dispatch($notification);

        $this->info("‚úÖ Correo de prueba creado y enviado");
        $this->line("üìß Notificaci√≥n ID: {$notification->id}");
        $this->line("üë• Destinatarios: " . implode(', ', $setting->email_addresses));
        $this->line("üì± Para ver el correo: http://127.0.0.1:8025");
        $this->line("");
        $this->line("‚è≥ Ejecute 'php artisan queue:work --once' para procesar el env√≠o");

        return 0;
    }
}
