<?php

namespace App\Console\Commands;

use App\Services\NotificationService;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;

class ProcessNotifications extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'notifications:process 
                            {--type= : Tipo espec√≠fico de notificaci√≥n (calibration_due, maintenance_reminder, maintenance_overdue)}
                            {--force : Forzar env√≠o sin verificar duplicados}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Procesar y enviar notificaciones autom√°ticas del sistema';

    protected $notificationService;

    public function __construct(NotificationService $notificationService)
    {
        parent::__construct();
        $this->notificationService = $notificationService;
    }

    /**
     * Execute the console command.
     */
    public function handle(): int
    {
        $this->info('üöÄ Iniciando procesamiento de notificaciones...');

        try {
            $type = $this->option('type');

            if ($type) {
                $this->info("üìß Procesando notificaciones de tipo: {$type}");
                $this->processSpecificNotificationType($type);
            } else {
                $this->info('üìß Procesando todas las notificaciones pendientes...');
                $this->notificationService->processAllPendingNotifications();
            }

            $this->info('‚úÖ Procesamiento de notificaciones completado exitosamente');

            // Mostrar estad√≠sticas
            $this->showStatistics();

            return Command::SUCCESS;
        } catch (\Exception $e) {
            $this->error("‚ùå Error procesando notificaciones: {$e->getMessage()}");
            Log::error('Error en comando ProcessNotifications', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
            ]);

            return Command::FAILURE;
        }
    }

    /**
     * Procesar un tipo espec√≠fico de notificaci√≥n
     */
    private function processSpecificNotificationType(string $type): void
    {
        switch ($type) {
            case 'calibration_due':
                $this->info('üîß Procesando notificaciones de calibraciones pr√≥ximas a vencer...');
                // Aqu√≠ se procesar√≠an solo las calibraciones
                break;

            case 'maintenance_reminder':
                $this->info('üìÖ Procesando recordatorios de mantenimiento...');
                // Aqu√≠ se procesar√≠an solo los recordatorios
                break;

            case 'maintenance_overdue':
                $this->info('üö® Procesando mantenimientos vencidos...');
                // Aqu√≠ se procesar√≠an solo los vencidos
                break;

            default:
                $this->error("‚ùå Tipo de notificaci√≥n no v√°lido: {$type}");
                $this->info('Tipos v√°lidos: calibration_due, maintenance_reminder, maintenance_overdue');
                return;
        }

        $this->notificationService->processAllPendingNotifications();
    }

    /**
     * Mostrar estad√≠sticas del procesamiento
     */
    private function showStatistics(): void
    {
        $this->info('');
        $this->info('üìä Estad√≠sticas del procesamiento:');

        // Obtener estad√≠sticas de la base de datos
        $pendingNotifications = \App\Models\EmailNotification::where('status', 'pending')->count();
        $sentNotifications = \App\Models\EmailNotification::where('status', 'sent')
            ->where('sent_at', '>=', now()->subHour())
            ->count();
        $failedNotifications = \App\Models\EmailNotification::where('status', 'failed')->count();

        $this->table(
            ['Estado', 'Cantidad'],
            [
                ['Pendientes', $pendingNotifications],
                ['Enviadas (√∫ltima hora)', $sentNotifications],
                ['Fallidas (total)', $failedNotifications],
            ]
        );

        if ($failedNotifications > 0) {
            $this->warn("‚ö†Ô∏è  Hay {$failedNotifications} notificaciones fallidas. Revisa los logs para m√°s detalles.");
        }
    }
}
